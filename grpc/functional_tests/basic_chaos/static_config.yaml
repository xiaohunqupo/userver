# yaml
components_manager:
    components:
        # The required common components
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: debug
                    overflow_behavior: discard

        # gRPC server and service
        grpc-server:
            port: 8091
            service-defaults:
                task-processor: main-task-processor
                middlewares:
                  - grpc-server-logging
                  - grpc-server-baggage
                  - grpc-server-congestion-control
# /// [Sample grpc server logging middleware component config]
        grpc-server-logging:
            log-level: info
            msg-log-level: info
            msg-size-log-limit: 512
# /// [Sample grpc server logging middleware component config]

# /// [Sample grpc server deadline propagation middleware component config]
        grpc-server-deadline-propagation:
            # Nothing
# /// [Sample grpc server deadline propagation middleware component config]

# /// [Sample grpc server baggage middleware component config]
        grpc-server-baggage:
            # Nothing
# /// [Sample grpc server baggage middleware component config]

# /// [Sample grpc server congestion control middleware component config]
        grpc-server-congestion-control:
            # Nothing
# /// [Sample grpc server congestion control middleware component config]

# /// [Sample grpc server field-mask middleware component config]
        grpc-server-field-mask:
            metadata-field-name: field-mask
# /// [Sample grpc server field-mask middleware component config]
        greeter-service:
            greeting-prefix: Hello

        # gRPC client
        grpc-client-common:
            blocking-task-processor: grpc-blocking-task-processor
        grpc-client-factory:
            middlewares:
              - grpc-client-logging
              - grpc-client-baggage
            channel-args: {}
        greeter-client:
            endpoint: '[::]:8081'

        greeter-client-component:
            endpoint: '[::]:8081'
            client-name: greeter-client
            dedicated-channel-counts:
                SayHello: 3
                SayHelloRequestStream: 2
            factory-component: grpc-client-factory

        # http server
        server:
            listener:
                port: 8092
                task_processor: main-task-processor

        # http handler for test case
        greeter-http-handler:
            path: /hello
            method: POST
            task_processor: main-task-processor

        http-client:
            fs-task-processor: main-task-processor
        dns-client:
            fs-task-processor: fs-task-processor
        congestion-control:

        testsuite-support:
        tests-control:
            method: POST
            path: /tests/{action}
            skip-unregistered-testpoints: true
            task_processor: main-task-processor
            testpoint-timeout: 10s
            throttling_enabled: false

# /// [Sample grpc client logging middleware component config]
        grpc-client-logging:
            log-level: info
            msg-log-level: info
            msg-size-log-limit: 512
# /// [Sample grpc client logging middleware component config]

# /// [Sample grpc client deadline propagation middleware component config]        
        grpc-client-deadline-propagation:
            # Nothing
# /// [Sample grpc client deadline propagation middleware component config]

# /// [Sample grpc client baggage middleware component config]
        grpc-client-baggage:
            # Nothing
# /// [Sample grpc client baggage middleware component config]


    default_task_processor: main-task-processor

    task_processors:
        grpc-blocking-task-processor:  # For blocking gRPC channel creation
            thread_name: grpc-worker
            worker_threads: 2
        main-task-processor:           # For non-blocking operations
            worker_threads: 4
        fs-task-processor:             # For blocking filesystem operations
            worker_threads: 2
